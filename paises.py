import streamlit as st
from datetime import date
from dateutil.relativedelta import relativedelta
import matplotlib.pyplot as plt # Adicionado para gr√°ficos

# --- 1. CONFIGURA√á√ÉO DA P√ÅGINA ---
st.set_page_config(
    page_title="Calculadora de Rescis√£o Completa (Estimativa 2024/2025)",
    page_icon="üë∑",
    layout="centered"
)

# --- 2. FUN√á√ïES DE C√ÅLCULO (L√≥gica Trabalhista e Tribut√°ria) ---

def calcular_meses_proporcionais(admissao, demissao):
    """Calcula os meses proporcionais (com a regra dos 15 dias)."""
    if demissao <= admissao:
        return 0
    diff = relativedelta(demissao, admissao)
    meses = diff.years * 12 + diff.months
    # Regra dos 15 dias para contagem do avo proporcional
    if demissao.day >= 15:
        meses += 1
    return meses

def calcular_aviso_previo(admissao, demissao, salario, motivo):
    """Calcula o aviso pr√©vio proporcional (Lei 12.506/2011)."""
    if motivo != "sem justa causa":
        return 0.0, 0
    
    anos = relativedelta(demissao, admissao).years
    dias = 30 + anos * 3
    if dias > 90:
        dias = 90
        
    valor = (salario / 30) * dias
    return valor, dias

def calcular_fgts_multa(salario, meses_trabalhados):
    """Calcula o FGTS depositado e a Multa de 40% (simplifica√ß√£o)."""
    # Simplifica√ß√£o: FGTS total depositado = 8% * Sal√°rio * Meses
    fgts_depositado = salario * meses_trabalhados * 0.08
    multa_fgts = fgts_depositado * 0.40
    return fgts_depositado, multa_fgts

def calcular_inss_progressivo(base):
    """Tabela progressiva de INSS 2024 (Mantida para simula√ß√£o)."""
    faixas = [
        (1412.00, 0.075),
        (2666.68, 0.09),
        (4000.03, 0.12),
        (7786.02, 0.14)
    ]
    imposto = 0.0
    base_anterior = 0.0
    
    for limite, aliquota in faixas:
        if base > limite:
            imposto += (limite - base_anterior) * aliquota
            base_anterior = limite
        else:
            imposto += (base - base_anterior) * aliquota
            break
            
    if base > 7786.02: # Teto do INSS em 2024
        imposto = 908.86 
        
    return max(imposto, 0.0)

def calcular_irrf(base, dependentes):
    """C√°lculo simplificado de IRRF (Tabela Mensal 2024)."""
    # Dedu√ß√£o de dependente (R$ 189,59 em 2024)
    deducao_dependente = dependentes * 189.59
    base -= deducao_dependente

    # Tabela progressiva
    if base <= 2259.20:
        aliquota, parcela = 0.0, 0.0
    elif base <= 2826.65:
        aliquota, parcela = 0.075, 169.44
    elif base <= 3751.05:
        aliquota, parcela = 0.15, 381.44
    elif base <= 4664.68:
        aliquota, parcela = 0.225, 662.77
    else:
        aliquota, parcela = 0.275, 896.00
    
    imposto = base * aliquota - parcela
    
    return max(imposto, 0.0)

# --- 3. INTERFACE STREAMLIT ---

st.title("üë∑ Calculadora de Rescis√£o Completa")
st.markdown("### Simula√ß√£o detalhada de todas as verbas (CLT, INSS e IRRF)")
st.caption("Ferramenta educacional de LegalTech para estimativas iniciais.")

st.markdown("---")

# 3.1. Entrada de Dados
salario_base = st.number_input(
    "1. Sal√°rio Mensal Bruto (R$):",
    min_value=0.01,
    value=2400.00,
    step=100.00,
    format="%.2f"
)

col_adm, col_dem = st.columns(2)
with col_adm:
    data_admissao = st.date_input("2. Data de Admiss√£o (In√≠cio):", value=date(2022, 1, 1))
with col_dem:
    data_demissao = st.date_input("3. Data de Demiss√£o (Fim):", value=date.today(), min_value=data_admissao)

col_mot, col_dias = st.columns(2)
with col_mot:
    motivo = st.selectbox("4. Motivo da Rescis√£o:", ["sem justa causa", "por justa causa"])
with col_dias:
    dias_trabalhados_no_mes = st.number_input("5. Dias trabalhados no m√™s da demiss√£o (Saldo de Sal√°rio):", 
                                              min_value=0, max_value=31, value=data_demissao.day)

col_dep, col_ferias = st.columns(2)
with col_dep:
    dependentes = st.number_input("6. N√∫mero de dependentes (IR):", min_value=0, max_value=10, value=0)
with col_ferias:
    ferias_vencidas = st.radio("7. Per√≠odos de f√©rias vencidas:", ["0", "1", "2"])
qtd_ferias_vencidas = int(ferias_vencidas)

st.markdown("---")

# --- 4. C√ÅLCULO E EXIBI√á√ÉO ---

if st.button("Calcular Rescis√£o Completa", type="primary"):
    
    meses_prop = calcular_meses_proporcionais(data_admissao, data_demissao)
    
    if meses_prop <= 0:
        st.error("Verifique as datas. A demiss√£o deve ser posterior √† admiss√£o.")
    else:
        # --- C√ÅLCULO DAS VERBAS DE PROVENTOS ---
        
        # 1. Saldo de Sal√°rio
        saldo_salario = (salario_base / 30) * dias_trabalhados_no_mes
        
        # 2. 13¬∫ Sal√°rio Proporcional
        valor_13_proporcional = (salario_base / 12) * meses_prop
        
        # 3. F√©rias Proporcionais + 1/3
        valor_ferias_prop_base = (salario_base / 12) * meses_prop
        valor_terco_prop = valor_ferias_prop_base / 3
        
        # 4. F√©rias Vencidas + 1/3
        valor_ferias_vencidas = qtd_ferias_vencidas * (salario_base + (salario_base / 3))
        
        # 5. Aviso Pr√©vio Indenizado
        aviso_valor, aviso_dias = calcular_aviso_previo(data_admissao, data_demissao, salario_base, motivo)
        
        # --- C√ÅLCULO TRIBUT√ÅRIO E DESCONTOS ---
        
        # Base de INSS (Incide sobre Saldo de Sal√°rio e 13¬∫. Simplifica√ß√£o: apenas Saldo)
        base_inss = saldo_salario 
        inss = calcular_inss_progressivo(base_inss)
        
        # Base de IRRF (Incide sobre Saldo de Sal√°rio - INSS. F√©rias e Aviso s√£o ISENTOS)
        base_irrf_salario = saldo_salario - inss
        ir_salario = calcular_irrf(base_irrf_salario, dependentes)
        
        # IRRF Exclusivo (Simplifica√ß√£o: apenas 13¬∫ Sal√°rio)
        inss_13 = calcular_inss_progressivo(valor_13_proporcional)
        ir_13_exclusivo = calcular_irrf(valor_13_proporcional - inss_13, 0) # 13¬∫ n√£o usa dependentes para base
        
        # --- C√ÅLCULO FGTS E MULTA ---
        
        # Simplifica√ß√£o dos meses trabalhados para FGTS
        meses_fgts = relativedelta(data_demissao, data_admissao).years * 12 + relativedelta(data_demissao, data_admissao).months
        fgts_depositado, multa_fgts = calcular_fgts_multa(salario_base, meses_fgts)
        
        # --- TOTAIS ---
        
        proventos = saldo_salario + valor_13_proporcional + valor_ferias_prop_base + valor_terco_prop + valor_ferias_vencidas + aviso_valor
        descontos = inss + ir_salario + ir_13_exclusivo
        total_liquido = proventos - descontos
        
        # FGTS e Multa s√£o valores a sacar, n√£o entram no L√≠quido da folha
        total_a_sacar_fgts = fgts_depositado + multa_fgts

        # --- EXIBI√á√ÉO DOS RESULTADOS ---
        
        st.subheader(f"üßæ Rescis√£o Estimada (Tempo de Servi√ßo: {meses_prop} meses)")
        
        col_liq, col_sacar = st.columns(2)
        col_liq.success(f"### üí∞ L√≠quido a Receber (Folha): R$ {total_liquido:,.2f}")
        col_sacar.info(f"### üè¶ FGTS + Multa (a Sacar): R$ {total_a_sacar_fgts:,.2f}")
        
        st.markdown("---")

        # Detalhamento
        st.markdown("#### Detalhamento dos Proventos e Descontos")
        
        col_det1, col_det2 = st.columns(2)
        
        with col_det1:
            st.metric("Saldo de Sal√°rio", f"R$ {saldo_salario:,.2f}")
            st.metric("13¬∫ Sal√°rio Proporcional", f"R$ {valor_13_proporcional:,.2f}")
            st.metric("F√©rias Proporcionais + 1/3", f"R$ {valor_ferias_prop_base + valor_terco_prop:,.2f}")
            st.metric("F√©rias Vencidas + 1/3", f"R$ {valor_ferias_vencidas:,.2f}")
            st.metric(f"Aviso Pr√©vio ({aviso_dias} dias)", f"R$ {aviso_valor:,.2f}")
            
        with col_det2:
            st.markdown(f"**Proventos Brutos:** R$ {proventos:,.2f}")
            st.markdown("---")
            st.error(f"**Desconto INSS (Sal√°rio):** R$ {inss:,.2f}")
            st.error(f"**Desconto IRRF (Sal√°rio):** R$ {ir_salario:,.2f}")
            st.error(f"**Desconto IRRF (13¬∫ Exclusivo):** R$ {ir_13_exclusivo:,.2f}")
            st.markdown(f"**Descontos Totais:** - R$ {descontos:,.2f}")

        # Gr√°fico de Pizza (Propor√ß√£o das Verbas de Recebimento)
        st.markdown("---")
        st.subheader("Visualiza√ß√£o da Composi√ß√£o dos Proventos")

        categorias_pizza = {
            "Saldo Sal√°rio": saldo_salario,
            "13¬∫ Sal√°rio Prop.": valor_13_proporcional,
            "F√©rias Prop. + 1/3": valor_ferias_prop_base + valor_terco_prop,
            "F√©rias Vencidas + 1/3": valor_ferias_vencidas,
            "Aviso Pr√©vio": aviso_valor,
        }
        
        labels_pizza = []
        sizes_pizza = []
        for cat, val in categorias_pizza.items():
            if val > 0:
                labels_pizza.append(cat)
                sizes_pizza.append(val)
        
        if sum(sizes_pizza) > 0:
            plt.figure(figsize=(7, 7))
            plt.pie(sizes_pizza, labels=labels_pizza, autopct='%1.1f%%', startangle=90, wedgeprops={'edgecolor': 'black'})
            plt.title("Composi√ß√£o dos Proventos Rescis√≥rios", fontsize=14)
            st.pyplot(plt)
        
        st.markdown("---")
        st.info(f"""
        ‚ö†Ô∏è **Aviso Legal (Simula√ß√£o):**
        * C√°lculo baseado nas tabelas de INSS e IRRF de **2024**.
        * N√£o inclui faltas, horas extras, adicionais (insalubridade/periculosidade) ou outras dedu√ß√µes.
        * **Consulte um profissional** (contador ou advogado trabalhista) para valores oficiais.
        """)

st.caption("Projeto de LegalTech (Direito do Trabalho) com Python e Streamlit.")
