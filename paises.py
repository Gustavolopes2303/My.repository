import streamlit as st
import re  # Biblioteca padr√£o do Python para Express√µes Regulares (busca e substitui√ß√£o de texto)
import pandas as pd

# --- LISTA DE TERMOS JUR√çDICOS (O "Cora√ß√£o" do Projeto) ---
# Voc√™ pode expandir ou mudar essa lista √† vontade!
TERMOS_CHAVE = [
    "Peti√ß√£o Inicial",
    "Contrato Social",
    "Ac√≥rd√£o",
    "Jurisprud√™ncia",
    "Requerido",
    "Requerente",
    "Exce√ß√£o",
    "Recurso",
    "Senten√ßa",
    "Agravo",
    "C√≥digo Civil",
    "C√≥digo de Processo Civil",
    "Tribunal de Justi√ßa"
]

# --- FUN√á√ÉO DE PROCESSAMENTO DE TEXTO ---
def destacar_termos(texto, termos):
    """Percorre o texto e formata os termos chave com HTML para destaque."""
    
    # 1. Cria um dicion√°rio para contar a frequ√™ncia dos termos
    contagem = {}
    
    # 2. Prepara o estilo de destaque (HTML/Markdown com cor vermelha)
    # Usamos re.escape para garantir que termos com caracteres especiais funcionem (ex: "Art. 5¬∫")
    for termo in termos:
        # A express√£o regular ignora mai√∫sculas/min√∫sculas (re.IGNORECASE)
        # e usa boundary \b para pegar a palavra inteira (evita que "R√©u" destaque em "Reuni√£o")
        
        # Cria a tag de destaque: **<span style="color:red;">TERMO</span>**
        estilo_destaque = f'**<span style="color:red;">{termo.upper()}</span>**'
        
        # Express√£o regular para encontrar o termo
        pattern = r'\b' + re.escape(termo) + r'\b'
        
        # Encontra todas as ocorr√™ncias para a contagem
        ocorrencias = re.findall(pattern, texto, re.IGNORECASE)
        contagem[termo] = len(ocorrencias)
        
        # Substitui todas as ocorr√™ncias no texto pela vers√£o formatada em vermelho
        texto = re.sub(pattern, estilo_destaque, texto, flags=re.IGNORECASE)
        
    return texto, contagem


# --- INTERFACE STREAMLIT ---

st.set_page_config(
    page_title="Detector de Termos Jur√≠dicos Chave",
    page_icon="üîé",
    layout="wide"
)

st.title("üîé Detector de Termos Jur√≠dicos Chave")
st.markdown("### Ferramenta de An√°lise R√°pida de Documentos (LegalTech)")
st.caption("Cole um texto jur√≠dico (peti√ß√£o, trecho de lei) para destacar instantaneamente os termos mais relevantes para a sua √°rea.")

# 1. √Årea de texto para o usu√°rio colar o documento
texto_entrada = st.text_area(
    "Cole seu texto jur√≠dico aqui:",
    height=400,
    placeholder="Ex: 'O r√©u apresentou Peti√ß√£o Inicial com Recurso contra a Senten√ßa do Tribunal de Justi√ßa, alegando viola√ß√£o do C√≥digo Civil...'"
)

# 2. Bot√£o para iniciar a an√°lise
if st.button("Analisar Documento e Destacar Termos", type="primary"):
    
    if not texto_entrada:
        st.warning("Por favor, cole algum texto para iniciar a an√°lise.")
    else:
        # Chama a fun√ß√£o de destaque
        texto_destacado, contagem_termos = destacar_termos(texto_entrada, TERMOS_CHAVE)
        
        # --- COLUNA LATERAL (Contador, o que parece inteligente) ---
        with st.sidebar:
            st.header("üìä Frequ√™ncia de Termos")
            
            # Converte a contagem para um DataFrame e filtra apenas os termos que apareceram
            df_contagem = pd.DataFrame(list(contagem_termos.items()), columns=['Termo', 'Ocorr√™ncias'])
            df_contagem = df_contagem[df_contagem['Ocorr√™ncias'] > 0]
            
            if not df_contagem.empty:
                # Exibe a tabela de forma simples e compacta
                st.dataframe(df_contagem, hide_index=True, use_container_width=True)
            else:
                st.info("Nenhum termo chave foi detectado no texto.")

        # --- COLUNA PRINCIPAL (O Efeito Visual Impactante) ---
        st.subheader("Documento com Destaques:")
        
        # st.markdown com a flag unsafe_allow_html √© OBRIGAT√ìRIO 
        # para que o Streamlit exiba as cores e formata√ß√µes HTML injetadas.
        st.markdown(texto_destacado, unsafe_allow_html=True)

st.markdown("---")
st.caption("Desenvolvido com Python e Streamlit.")
