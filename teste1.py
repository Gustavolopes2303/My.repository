import streamlit as st
st.write("Hello world")
st.title("Sauda√ß√£o")
nome = st.text_input("Digite seu nome")
if nome: 
   st.write(nome.upper())
import streamlit as st
import pandas as pd
import random
import matplotlib.pyplot as plt
import numpy as np

# --- DADOS DO SISTEMA: TERMOS E SIMULA√á√ÉO DE JURISPRUD√äNCIA ---

# Termos Jur√≠dicos que ser√£o contados
TERMOS_JURIDICOS = [
    "Dano Moral", "Indeniza√ß√£o", "Recurso", "Peti√ß√£o", "Contrato",
    "Senten√ßa", "Jurisprud√™ncia", "Reconven√ß√£o", "Precedente", "Cita√ß√£o"
]

# Defini√ß√£o de "√Åreas do Direito" e como elas influenciam a frequ√™ncia dos termos
# O valor √© o FATOR que ser√° multiplicado pela frequ√™ncia base (para simular preval√™ncia)
AREAS_DO_DIREITO = {
    "Direito do Consumidor": {
        "Dano Moral": 3, "Indeniza√ß√£o": 2, "Contrato": 1.5, "Peti√ß√£o": 1, "Recurso": 0.8
    },
    "Direito Civil (Contratos)": {
        "Contrato": 3, "Reconven√ß√£o": 2, "Senten√ßa": 1.5, "Indeniza√ß√£o": 0.5, "Peti√ß√£o": 1
    },
    "Direito Processual": {
        "Recurso": 3, "Peti√ß√£o": 2.5, "Senten√ßa": 2, "Precedente": 1.5, "Cita√ß√£o": 1
    }
}

# --- FUN√á√ÉO COMPLEXA: SIMULA√á√ÉO DE PROCESSAMENTO DE TEXTO ---

@st.cache_data
def simular_analise_frequencia(area_selecionada):
    """
    Simula o processamento de um grande corpo de jurisprud√™ncia
    e retorna a contagem de termos baseada na √°rea do direito selecionada.
    """
    # 1. Frequ√™ncia Base (Comum a todas as √°reas - ru√≠do)
    frequencia_base = {termo: random.randint(50, 150) for termo in TERMOS_JURIDICOS}
    
    # 2. Aplica o Fator de Preval√™ncia da √Årea Selecionada
    frequencia_final = frequencia_base.copy()
    fator_previo = AREAS_DO_DIREITO.get(area_selecionada, {})
    
    for termo, fator in fator_previo.items():
        # Aumenta a contagem de termos relevantes para a √°rea (complexidade)
        aumento = int(frequencia_base[termo] * fator * np.random.uniform(1.5, 2.5))
        frequencia_final[termo] += aumento
    
    # 3. Cria o DataFrame para Visualiza√ß√£o
    df = pd.DataFrame(
        list(frequencia_final.items()), 
        columns=['Termo', 'Frequ√™ncia']
    ).sort_values(by='Frequ√™ncia', ascending=False).reset_index(drop=True)
    
    return df

# --- ESTRUTURA E LAYOUT STREAMLIT ---

st.set_page_config(
    page_title="Streamlit Lexicographer ‚öñÔ∏è",
    page_icon="üìú",
    layout="wide"
)

st.title("‚öñÔ∏è Lexicographer: An√°lise de Frequ√™ncia de Termos Jur√≠dicos")
st.markdown("Simula√ß√£o da an√°lise de jurisprud√™ncia. Escolha a √°rea para ver a preval√™ncia dos termos.")

# --- ENTRADA DE DADOS E CONTROLES ---
col_select, col_metric = st.columns([1, 2])

with col_select:
    st.subheader("Configura√ß√µes de An√°lise")
    area_selecionada = st.selectbox(
        "Selecione a √Årea do Direito para An√°lise:",
        list(AREAS_DO_DIREITO.keys())
    )

# --- PROCESSAMENTO E GERA√á√ÉO DO DATAFRAME ---
# A fun√ß√£o √© chamada aqui, e o cache garante que n√£o recalcule se a √°rea n√£o mudar
df_frequencia = simular_analise_frequencia(area_selecionada)

# --- RESULTADOS M√âTRICOS E GERAIS ---
total_termos = df_frequencia['Frequ√™ncia'].sum()
termo_mais_frequente = df_frequencia.iloc[0]['Termo']
frequencia_top = df_frequencia.iloc[0]['Frequ√™ncia']

with col_metric:
    st.subheader("Vis√£o Geral da An√°lise")
    col_m1, col_m2 = st.columns(2)
    
    col_m1.metric(label="Total de Termos Analisados (Simulado)", value=f"{total_termos:,}", delta="Total de ocorr√™ncias")
    col_m2.metric(label="Termo Mais Frequente", value=termo_mais_frequente, delta=f"{frequencia_top} ocorr√™ncias")

st.markdown("---")

# --- VISUALIZA√á√ÉO DE DADOS ---
st.header(f"Frequ√™ncia de Termos em **{area_selecionada}**")

col_graph, col_data = st.columns([2, 1])

with col_graph:
    st.subheader("Gr√°fico de Frequ√™ncia (Top 10)")
    
    # Cria√ß√£o do Gr√°fico de Barras (Visualiza√ß√£o Jur√≠dica)
    fig, ax = plt.subplots(figsize=(10, 5))
    df_frequencia_top10 = df_frequencia.head(10)
    
    # Escolhe cores para destaque: o top 1 √© diferente
    cores = ['#2E86C1'] * len(df_frequencia_top10)
    cores[0] = '#E74C3C' # Destaque vermelho para o termo mais frequente

    ax.bar(df_frequencia_top10['Termo'], df_frequencia_top10['Frequ√™ncia'], color=cores)
    
    ax.set_title(f'Top 10 Termos em {area_selecionada}', fontsize=14)
    ax.set_ylabel('Contagem (Simulada)')
    ax.set_xlabel('Termo Jur√≠dico')
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    st.pyplot(fig)

with col_data:
    st.subheader("Dados Detalhados")
    # Tabela de dados brutos
    st.dataframe(df_frequencia, use_container_width=True, hide_index=True)

st.markdown("---")
st.caption("Nota: Os dados de frequ√™ncia s√£o gerados por um modelo de simula√ß√£o para fins de demonstra√ß√£o.")
